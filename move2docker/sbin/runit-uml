#!/bin/bash
set +e
. /.denv

mount -t tmpfs tmpfs /mnt
mkdir -p /mnt/data
mount /dev/ubda /mnt/data || true

mkdir -p /mnt/data/diff
mkdir -p /mnt/data/work

mount -t overlay overlay -o lowerdir=/,upperdir=/mnt/data/diff,workdir=/mnt/data/work /

mount -t tmpfs tmpfs /run
mount --bind /run /var/run
mount -t tmpfs tmpfs /etc/service
mount -t proc proc /proc
mount -t sysfs sys /sys
ln -s /proc/self/fd /dev/fd

sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv6.conf.default.forwarding=1
sysctl -w net.ipv6.conf.all.forwarding=1
sysctl -w net.ipv4.conf.default.rp_filter=0
sysctl -w net.ipv4.conf.all.rp_filter=0

ip addr add $UML_IF_SLIRP_IPV4 dev vec0
ip link set dev vec0 address $UML_IF_SLIRP_MACADDR
ip link set vec0 up
ip route add default via $UML_IF_SLIRP_IPV4_GW

ip link set dev vec1 address $EG_MACADDR
ip link set vec1 mtu $EG_IF_MTU
ip link set vec1 up
ip addr flush dev vec1
ip addr add $DN42_IPV4/$DN42_IPV4_NET_CHECK_LEN dev vec1
ip addr add $DN42_IPV6/$DN42_IPV6_NET_CHECK_LEN dev vec1
ip addr add $DN42_IPV6_LL/64 dev vec1

if [[ "$UML_IF_RAW" == 1 ]]; then
  ip addr add $UML_IF_RAW_IPV4 dev vec2
  ip link set dev vec2 address $UML_IF_RAW_MACADDR
  ip link set vec2 up
  ip route del default via $UML_IF_SLIRP_IPV4_GW
  ip route add default via $UML_IF_RAW_IPV4_GW
fi

cp -rp /etc/service_uml/* /etc/service

export LD_PRELOAD=/lib/runit-docker.so
source /etc/profile
export HOME=/root

#exec bash
exec runsvdir /etc/service
